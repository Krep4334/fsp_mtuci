// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  ORGANIZER
  JUDGE
  PARTICIPANT
  SPECTATOR
}

enum TournamentStatus {
  DRAFT
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TournamentType {
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION
  ROUND_ROBIN
  SWISS
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  role      UserRole @default(PARTICIPANT)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Отношения
  organizedTournaments Tournament[] @relation("TournamentOrganizer")
  judgeTournaments     TournamentJudge[]
  participations       Participation[]
  matchResults         MatchResult[]
  captainTeams         Team[] @relation("TeamCaptain")
  teamMemberships      TeamMember[]

  @@map("users")
}

model Tournament {
  id          String           @id @default(cuid())
  name        String
  description String?
  type        TournamentType
  status      TournamentStatus @default(DRAFT)
  maxTeams    Int?
  registrationStart DateTime?
  registrationEnd   DateTime?
  startDate   DateTime?
  endDate     DateTime?
  location    String?
  prizePool   Float?
  rules       String?
  image       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Отношения
  organizerId String
  organizer   User            @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  judges      TournamentJudge[]
  teams       Team[]
  matches     Match[]
  brackets    Bracket[]
  participations Participation[]

  @@map("tournaments")
}

model TournamentJudge {
  id           String @id @default(cuid())
  tournamentId String
  userId       String
  permissions  String[] // Массив разрешений для судьи
  createdAt    DateTime @default(now())

  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id])

  @@unique([tournamentId, userId])
  @@map("tournament_judges")
}

model Team {
  id           String   @id @default(cuid())
  name         String
  description  String?
  logo         String?
  captainId    String
  tournamentId String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Отношения
  captain     User            @relation("TeamCaptain", fields: [captainId], references: [id])
  tournament  Tournament      @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  members     TeamMember[]
  participations Participation[]
  matchesAsTeam1 Match[] @relation("MatchTeam1")
  matchesAsTeam2 Match[] @relation("MatchTeam2")

  @@unique([tournamentId, name])
  @@map("teams")
}

model TeamMember {
  id     String @id @default(cuid())
  teamId String
  userId String

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@map("team_members")
}

model Participation {
  id           String   @id @default(cuid())
  teamId       String
  userId       String
  tournamentId String
  status       String   @default("PENDING") // PENDING, APPROVED, REJECTED
  appliedAt    DateTime @default(now())
  approvedAt   DateTime?

  team       Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id])
  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([teamId, tournamentId])
  @@map("participations")
}

model Bracket {
  id           String         @id @default(cuid())
  tournamentId String
  name         String
  round        Int
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())

  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  matches    Match[]

  @@map("brackets")
}

model Match {
  id          String      @id @default(cuid())
  tournamentId String
  bracketId   String?
  team1Id     String
  team2Id     String?
  status      MatchStatus @default(SCHEDULED)
  scheduledAt DateTime?
  startedAt   DateTime?
  endedAt     DateTime?
  round       Int
  position    Int // Позиция в сетке
  isBye       Boolean     @default(false) // Для свободных слотов
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Отношения
  tournament Tournament     @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  bracket    Bracket?       @relation(fields: [bracketId], references: [id])
  team1      Team           @relation("MatchTeam1", fields: [team1Id], references: [id])
  team2      Team?          @relation("MatchTeam2", fields: [team2Id], references: [id])
  results    MatchResult[]

  @@map("matches")
}

model MatchResult {
  id        String   @id @default(cuid())
  matchId   String
  userId    String // Кто ввел результат
  team1Score Int
  team2Score Int
  details   String? // JSON с детальной статистикой
  isConfirmed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@map("match_results")
}
