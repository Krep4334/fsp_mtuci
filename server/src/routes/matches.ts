import express from 'express';
import { body, validationResult } from 'express-validator';
import { PrismaClient } from '@prisma/client';
import { authenticate, AuthRequest } from '../middleware/auth';
import { createError } from '../middleware/errorHandler';

const router = express.Router();
const prisma = new PrismaClient();

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
router.get('/tournament/:tournamentId', async (req: any, res: any, next: any) => {
  try {
    const { tournamentId } = req.params;

    const matches = await prisma.match.findMany({
      where: { tournamentId },
      include: {
        team1: {
          select: {
            id: true,
            name: true,
            logo: true
          }
        },
        team2: {
          select: {
            id: true,
            name: true,
            logo: true
          }
        },
        bracket: {
          select: {
            id: true,
            name: true,
            round: true
          }
        },
        results: {
          include: {
            user: {
              select: {
                id: true,
                username: true,
                firstName: true,
                lastName: true
              }
            }
          },
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      },
      orderBy: [
        { round: 'asc' },
        { position: 'asc' }
      ]
    });

    res.json({
      success: true,
      data: { matches }
    });
  } catch (error) {
    next(error);
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–∞ –ø–æ ID
router.get('/:id', async (req: any, res: any, next: any) => {
  try {
    const match = await prisma.match.findUnique({
      where: { id: req.params.id },
      include: {
        team1: {
          select: {
            id: true,
            name: true,
            logo: true,
            captain: {
              select: {
                id: true,
                username: true,
                firstName: true,
                lastName: true
              }
            }
          }
        },
        team2: {
          select: {
            id: true,
            name: true,
            logo: true,
            captain: {
              select: {
                id: true,
                username: true,
                firstName: true,
                lastName: true
              }
            }
          }
        },
        bracket: {
          select: {
            id: true,
            name: true,
            round: true
          }
        },
        results: {
          include: {
            user: {
              select: {
                id: true,
                username: true,
                firstName: true,
                lastName: true
              }
            }
          },
          orderBy: { createdAt: 'desc' }
        }
      }
    });

    if (!match) {
      return next(createError('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω', 404));
    }

    res.json({
      success: true,
      data: { match }
    });
  } catch (error) {
    next(error);
  }
});

// –í–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
router.post('/:id/result', authenticate, [
  body('team1Score').isInt({ min: 0 }),
  body('team2Score').isInt({ min: 0 }),
  body('details').optional().isString()
], async (req: AuthRequest, res: any, next: any) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return next(createError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 400));
    }

    const { id } = req.params;
    if (!id) {
      return next(createError('ID –º–∞—Ç—á–∞ –Ω–µ —É–∫–∞–∑–∞–Ω', 400));
    }
    const { team1Score, team2Score, details } = req.body;
    const userId = req.user!.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∞
    const match = await prisma.match.findUnique({
      where: { id },
      include: {
        tournament: {
          include: {
            judges: {
              where: { userId }
            }
          }
        }
      }
    });

    if (!match) {
      return next(createError('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω', 404));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Å—É–¥—å—è, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω)
    const isJudge = (match as any).tournament.judges.length > 0;
    const isOrganizer = (match as any).tournament.organizerId === userId;
    const isAdmin = req.user!.role === 'ADMIN';

    if (!isJudge && !isOrganizer && !isAdmin) {
      return next(createError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', 403));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç—á–∞
    if (match.status === 'COMPLETED') {
      return next(createError('–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ —É–∂–µ –≤–≤–µ–¥–µ–Ω', 400));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é (–µ—Å–ª–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ)
    if (team1Score === team2Score && (match as any).tournament.type !== 'ROUND_ROBIN') {
      return next(createError('–ù–∏—á—å–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç—É—Ä–Ω–∏—Ä–∞', 400));
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const result = await prisma.matchResult.create({
      data: {
        matchId: id as string,
        userId,
        team1Score: team1Score as any,
        team2Score: team2Score as any,
        details: details as any,
        isConfirmed: isOrganizer || isAdmin // –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤
      },
      include: {
        user: {
          select: {
            id: true,
            username: true,
            firstName: true,
            lastName: true
          }
        }
      }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç—á–∞
    const updatedMatch = await prisma.match.update({
      where: { id },
      data: {
        status: 'COMPLETED',
        endedAt: new Date()
      },
      include: {
        tournament: true,
        bracket: true,
        team1: {
          select: {
            id: true,
            name: true,
            logo: true
          }
        },
        team2: {
          select: {
            id: true,
            name: true,
            logo: true
          }
        },
        results: {
          include: {
            user: {
              select: {
                id: true,
                username: true,
                firstName: true,
                lastName: true
              }
            }
          },
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      }
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    const winnerTeamId = team1Score > team2Score 
      ? match.team1Id 
      : team2Score > team1Score 
        ? match.team2Id 
        : null;

    console.log(`üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ ${id}: ${team1Score} - ${team2Score}, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerTeamId}`);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
    if (winnerTeamId) {
      const matchWithData = await prisma.match.findUnique({
        where: { id },
        include: { bracket: true }
      });
      
      await advanceWinnerToNextRound(
        match.tournamentId, 
        match.round, 
        match.position, 
        winnerTeamId,
        matchWithData?.bracket?.id || updatedMatch.bracket?.id || null
      );
    }

    res.status(201).json({
      success: true,
      data: { 
        match: updatedMatch,
        result 
      }
    });
  } catch (error) {
    next(error);
  }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
router.patch('/:id/result/confirm', authenticate, async (req: AuthRequest, res, next) => {
  try {
    const { id } = req.params;
    if (!id) {
      return next(createError('ID –º–∞—Ç—á–∞ –Ω–µ —É–∫–∞–∑–∞–Ω', 400));
    }
    const userId = req.user!.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∞
    const match = await prisma.match.findUnique({
      where: { id },
      include: {
        tournament: true,
        results: {
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      }
    });

    if (!match) {
      return next(createError('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω', 404));
    }

    if (!(match as any).results.length) {
      return next(createError('–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', 404));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω)
    const isOrganizer = (match as any).tournament.organizerId === userId;
    const isAdmin = req.user!.role === 'ADMIN';

    if (!isOrganizer && !isAdmin) {
      return next(createError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞', 403));
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const result = (match as any).results[0];
    const confirmedResult = await prisma.matchResult.update({
      where: { id: result.id },
      data: { isConfirmed: true },
      include: {
        user: {
          select: {
            id: true,
            username: true,
            firstName: true,
            lastName: true
          }
        }
      }
    });

    res.json({
      success: true,
      data: { result: confirmedResult }
    });
  } catch (error) {
    next(error);
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç—á–∞
router.patch('/:id/status', authenticate, [
  body('status').isIn(['SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED']),
  body('scheduledAt').optional().isISO8601()
], async (req: AuthRequest, res: any, next: any) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return next(createError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 400));
    }

    const { id } = req.params;
    if (!id) {
      return next(createError('ID –º–∞—Ç—á–∞ –Ω–µ —É–∫–∞–∑–∞–Ω', 400));
    }
    const { status, scheduledAt } = req.body;
    const userId = req.user!.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∞
    const match = await prisma.match.findUnique({
      where: { id },
      include: {
        tournament: {
          include: {
            judges: {
              where: { userId }
            }
          }
        }
      }
    });

    if (!match) {
      return next(createError('–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω', 404));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Å—É–¥—å—è, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω)
    const isJudge = (match as any).tournament.judges.length > 0;
    const isOrganizer = (match as any).tournament.organizerId === userId;
    const isAdmin = req.user!.role === 'ADMIN';

    if (!isJudge && !isOrganizer && !isAdmin) {
      return next(createError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç—á–∞', 403));
    }

    const updateData: any = { status };

    if (status === 'IN_PROGRESS' && !match.startedAt) {
      updateData.startedAt = new Date();
    }

    if (scheduledAt) {
      updateData.scheduledAt = new Date(scheduledAt);
    }

    const updatedMatch = await prisma.match.update({
      where: { id },
      data: updateData,
      include: {
        team1: {
          select: {
            id: true,
            name: true,
            logo: true
          }
        },
        team2: {
          select: {
            id: true,
            name: true,
            logo: true
          }
        },
        bracket: {
          select: {
            id: true,
            name: true,
            round: true
          }
        }
      }
    });

    res.json({
      success: true,
      data: { match: updatedMatch }
    });
  } catch (error) {
    next(error);
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
router.get('/tournament/:tournamentId/stats', async (req: any, res: any, next: any) => {
  try {
    const { tournamentId } = req.params;

    const [totalMatches, completedMatches, inProgressMatches, scheduledMatches] = await Promise.all([
      prisma.match.count({
        where: { tournamentId }
      }),
      prisma.match.count({
        where: { 
          tournamentId,
          status: 'COMPLETED'
        }
      }),
      prisma.match.count({
        where: { 
          tournamentId,
          status: 'IN_PROGRESS'
        }
      }),
      prisma.match.count({
        where: { 
          tournamentId,
          status: 'SCHEDULED'
        }
      })
    ]);

    res.json({
      success: true,
      data: {
        total: totalMatches,
        completed: completedMatches,
        inProgress: inProgressMatches,
        scheduled: scheduledMatches
      }
    });
  } catch (error) {
    next(error);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
async function advanceWinnerToNextRound(
  tournamentId: string,
  currentRound: number,
  currentPosition: number,
  winnerTeamId: string | null,
  bracketId?: string | null
): Promise<void> {
  if (!winnerTeamId) return;

  try {
    // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
    const nextRound = currentRound + 1;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ
    // –î–ª—è Single Elimination –ø–æ–∑–∏—Ü–∏—è = Math.ceil(currentPosition / 2)
    const nextPosition = Math.ceil(currentPosition / 2);

    console.log(`üìä –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏: —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è ${currentPosition} -> —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è ${nextPosition}`);

    console.log(`üîç –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç—á–∞: —Ä–∞—É–Ω–¥ ${nextRound}, –ø–æ–∑–∏—Ü–∏—è ${nextPosition}, bracketId: ${bracketId || 'null'}`);

    // –ò—â–µ–º –º–∞—Ç—á –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ
    const nextMatch = await prisma.match.findFirst({
      where: {
        tournamentId,
        ...(bracketId ? { bracketId } : {}),
        round: nextRound,
        position: nextPosition
      }
    });

    if (!nextMatch) {
      console.log(`‚ö†Ô∏è –°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–∞—É–Ω–¥–∞ ${nextRound}, –ø–æ–∑–∏—Ü–∏–∏ ${nextPosition}`);
      
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
      const allMatchesNextRound = await prisma.match.findMany({
        where: {
          tournamentId,
          ...(bracketId ? { bracketId } : {}),
          round: nextRound
        }
      });
      console.log(`üìã –í—Å–µ –º–∞—Ç—á–∏ —Ä–∞—É–Ω–¥–∞ ${nextRound}:`, allMatchesNextRound.map(m => ({ 
        id: m.id, 
        position: m.position, 
        team1: m.team1Id, 
        team2: m.team2Id 
      })));
      
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ (team1 –∏–ª–∏ team2) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
    // –î–ª—è –ø–æ–∑–∏—Ü–∏–π 1, 3, 5, 7... -> team1 –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–∞—Ç—á–µ
    // –î–ª—è –ø–æ–∑–∏—Ü–∏–π 2, 4, 6, 8... -> team2 –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–∞—Ç—á–µ
    const isTeam1Position = currentPosition % 2 === 1;

    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ ${nextMatch.id}: –ø–æ–∑–∏—Ü–∏—è ${currentPosition} -> ${isTeam1Position ? 'team1' : 'team2'}`);

    await prisma.match.update({
      where: { id: nextMatch.id },
      data: {
        ...(isTeam1Position ? { team1Id: winnerTeamId } : { team2Id: winnerTeamId })
      }
    });

    console.log(`‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å ${winnerTeamId} –ø—Ä–æ–¥–≤–∏–Ω—É—Ç –≤ —Ä–∞—É–Ω–¥ ${nextRound}, –ø–æ–∑–∏—Ü–∏—è ${nextPosition}, –º–∞—Ç—á ${nextMatch.id}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:', error);
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞
  }
}

export default router;
