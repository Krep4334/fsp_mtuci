import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Prisma, —á—Ç–æ–±—ã –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
const prisma = new PrismaClient({
  log: process.env['NODE_ENV'] === 'development' ? ['query', 'error', 'warn'] : ['error'],
});

export async function createAdminUser() {
  try {
    const email = 'admin@tournament.local';
    const username = 'admin';
    const password = 'admin123';
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = await prisma.user.findFirst({
      where: {
        OR: [
          { email },
          { username }
        ]
      }
    });

    if (existingUser) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∞
      if (existingUser.role !== 'ADMIN') {
        await prisma.user.update({
          where: { id: existingUser.id },
          data: { role: 'ADMIN' }
        });
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ —Ä–æ–ª–∏ ADMIN');
      } else {
        console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º');
      }
      
      return {
        email,
        username,
        password
      };
    }

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(password, 12);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const adminUser = await prisma.user.create({
      data: {
        email,
        username,
        password: hashedPassword,
        firstName: 'Admin',
        lastName: 'System',
        role: 'ADMIN',
        isActive: true
      }
    });

    console.log('‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('üìß Email:', email);
    console.log('üë§ Username:', username);
    console.log('üîë Password:', password);
    console.log('‚ö†Ô∏è  –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ!');

    return {
      email,
      username,
      password
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  createAdminUser()
    .then(() => {
      console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
      process.exit(0);
    })
    .catch((error) => {
      console.error('–û—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}
